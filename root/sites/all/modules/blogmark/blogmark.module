<?php

/**
 * Implementation of hook_menu().
 */
function blogmark_menu() {
  $items = array();
  $items['blogmarkok'] = array(
    'title' => 'Blogmarkok',
    'page callback' => 'blogmark_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['blogmarkok/attekintes'] = array(
    'title' => 'Áttekintés',
    'access callback' => TRUE,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['blogmarkok/bekuldes'] = array(
    'title' => 'Beküldés',
    'page callback' => 'blogmark_add_page',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );
  $items['blogmarkok/koszonjuk'] = array(
    'title' => 'Köszönjük',
    'page callback' => 'blogmark_thanks_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'weight' => 20,
  );

  $items['blogmarkok/latogatas/%node'] = array(
    'title' => 'Blogmarkok',
    'page callback' => 'blogmark_go_page',
    'page arguments' => array(2),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Page callback.
 */
function blogmark_page() {
  include_once drupal_get_path('module', 'pages') .'/pages.inc';
  return _pages_nodes_bytype('blogmark');
}

/**
 * Proxy függvény a node form hívásához. (A menu API 'file' csak lokális.)
 */
function blogmark_add_page() {
  include_once drupal_get_path('module', 'node') .'/node.pages.inc';
  $output = node_add('blogmark');
  if (isset($_GET['u'])) {
    // Ha popupban vagyunk, értelmesebb cím kell.
    drupal_set_title('Weblabor blogmark beküldése');
  }
  return $output;
}

/**
 * Köszönet oldal.
 */
function blogmark_thanks_page() {
  return 'Köszönjük a blogmarkot. A szerkesztők értesülnek az újdonságról és várhatóan az általuk jónak látott időben meg fogják jelentetni.';
}

/**
 * Implementation of hook_help().
 *
 * This does not fit into the content type help because
 * of filter_xss_admin() restrictions.
 */
function blogmark_help($path, $arg) {
  if ($path == 'blogmarkok/bekuldes' && !(isset($_GET['u']) || isset($_GET['embed']))) {
    return 'Blogmarkok beküldésére kényelmesebb mód is használható. Másold a
 <a href="javascript:popw=\'\';Q=\'\';x=document;y=window;if(x.selection) {Q=x.selection.createRange().text;} else if (y.getSelection) {Q=y.getSelection();} else if (x.getSelection) {Q=x.getSelection();}popw = y.open(\'http://weblabor.hu/blogmarkok/bekuldes?t=\' + encodeURIComponent(Q) + \'&u=\' + escape(location.href) + \'&n=\' + encodeURIComponent(document.title),\'blogmarkForm\',\'scrollbars=yes,width=500,height=500,top=175,left=75,status=yes,resizable=yes\');if (!document.all) T = setTimeout(\'popw.focus()\',50);void(0);">WL blogmark!</a> linket a böngésző kedvenceid közé. Ezután bármikor, amikor egy webhelyünkre felvételre érdemes oldalt, hírt vagy cikket látsz, csak kattints a bookmarkletre!';
  }
}

/**
 * Oldal kezelő blogmark kattintás számláláshoz.
 */
function blogmark_go_page($node = NULL) {
  if (isset($node) && !empty($node->wlink)) {
    db_query('UPDATE {wlink} SET click = click + 1 where nid = %d', $node->nid);
    header('HTTP/1.0 301 Moved Permanently');
    header('Location: '. $node->wlink);
  }
  else {
    drupal_not_found();
    exit();
  }
}

/**
 * Implementation of hook_link().
 */
function blogmark_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();
  if ($type == "node" && $node->type == 'blogmark') {
    $links['blogmark_visit'] = array(
      'title' => l('látogatás&raquo;', 'blogmarkok/latogatas/'. $node->nid, array('attributes' => array('title' => $node->wlink), 'html' => TRUE)),
      'html' => TRUE
    );
    if (user_access("access statistics")) {
      $links['blogmark_counter'] = array(
        'title' => $node->click,
      );
    }
  }
  return $links;
}

/**
 * Implementation of hook_perm().
 */
function blogmark_perm() {
  return array("publish blogmarks immediately");
}

/**
 * Implementation of hook_form_alter().
 */
function blogmark_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'blogmark_node_form') {
    
    $form['wlink'] = array(
      '#type' => 'textfield',
      '#title' => 'Link',
      '#default_value' => $form['#node']->wlink,
      '#description' => 'Az oldal teljes címe, például http://www.example.com/blog/12',
      '#required' => TRUE,
      '#weight' => 0
    );
  
    // Simple textfield.
    $form['body'] = $form['body_field']['body'];
    unset($form['body_field']);
    $form['body']['#type'] = 'textfield';
    $form['body']['#description'] = 'A blogmark rövid, néhány szavas leírása.';
    // Ensure teaser ends up in the body too.
    $form['teaser_include'] = array(
      '#type' => 'value',
      '#value' => 1
    );

    // Used for blogmark bookmarklet.
    // Prefill from GET request, if no nid present and 'u' query string exists.
    if (!isset($form['#node']->nid) && isset($_GET['u'])) {
      $form['wlink']['#default_value'] = $_GET['u']; // URL
      $form['title']['#default_value'] = $_GET['n']; // orig. title
      $form['body']['#default_value']  = $_GET['t']; // selection
      // Avoid getting the URL paramters again on preview.
      $form['#action'] = url('blogmarkok/bekuldes', array('query' => array('embed' => '1')));
    }
    
    if (isset($_GET['u']) || isset($_GET['embed'])) {
      $form['#redirect'] = 'blogmarkok/koszonjuk';
    }
    
    $form['#validate'][] = 'blogmark_form_validate';
  }
}

/**
 * Duplikált linkek hibaellenőrzése beküldéskor.
 */
function blogmark_form_validate($form, &$form_state) {
  $nid = db_result(db_query("SELECT nid FROM {wlink} WHERE wlink = '%s' AND nid <> %d", $form_state['values']['wlink'], $form_state['values']['nid']));
  if (!empty($nid)) {
    $node = node_load($nid);
    form_set_error('wlink', 'Egy link már létezik ezzel a célponttal: '. l($node->title, 'node/'. $node->nid));
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function blogmark_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'delete':
      db_query("DELETE FROM {wlink} WHERE nid = %d", $node->nid);
      cache_clear_all('wlink:blogmarks:block', 'cache');
      break;
    case 'insert':
      db_query("INSERT INTO {wlink} (nid, wlink) VALUES (%d, '%s')", $node->nid, $node->wlink);
      cache_clear_all('wlink:blogmarks:block', 'cache');
      break;
    case 'update':
      db_query("UPDATE {wlink} SET wlink = '%s' WHERE nid = %d", $node->wlink, $node->nid);
      cache_clear_all('wlink:blogmarks:block', 'cache');
      break;
    case 'load':
      if ($wlink = db_fetch_object(db_query("SELECT * FROM {wlink} WHERE nid = %d", $node->nid))) {
        $node->wlink = $wlink->wlink;
        $node->click = $wlink->click;
      }
      break;
  }
}

/**
 * Implementation of hook_block().
 */
function blogmark_block($op = "list", $delta = 0, $edit = array()) {
  if ($op == "list") {
    return array(array('info' => 'Friss blogmarkok'));
  }
  elseif ($op == 'view' && $delta == 0) {
    $cache = cache_get('wlink:blogmarks:block');
    if (!empty($cache)) {
      $content = $cache->data;
    }
    else {
      $result = db_query_range("SELECT n.nid, n.title, r.body, w.wlink FROM {node} n INNER JOIN {wlink} w ON n.nid = w.nid INNER JOIN {node_revisions} r ON r.vid = n.vid WHERE n.type = 'blogmark' AND n.status = 1 ORDER BY n.sticky DESC, n.created DESC", 0, 9);
    
      $links = array();
      while ($node = db_fetch_object($result)) {
        $node->body = check_plain($node->body);
        $comments = (int) module_invoke('comment', 'num_all', $node->nid);
        $links[] = l($node->title, 'blogmarkok/latogatas/'. $node->nid, array('attributes' => array('title' => $node->wlink))) .'&nbsp;&ndash;&nbsp;'. $node->body .'&nbsp;'. l('('. $comments .')', 'node/'. $node->nid, array('attributes' => array('title' => ($comments == 0 ? 'Nincs még hozzászólás' : format_plural($comments, '1 comment', '@count comments')), 'class' => 'comment-count')));
      }
      
      $content = theme('item_list', $links) .'<div class="more-link">'. l('tovább&raquo;', 'blogmarkok', array('html' => TRUE)) .'</div>';
      cache_set('wlink:blogmarks:block', $content, 'cache', CACHE_TEMPORARY);
    }
    return array(
      'subject' => 'Friss blogmarkok',
      'content' => $content
    );
  }
}
